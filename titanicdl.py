# -*- coding: utf-8 -*-
"""TitanicDL.ipynb
#Nilkanth Deshpande

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BjACIcHs6BonCKhyEK46yrDbA8I5aBji
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

train_df = pd.read_csv("/content/train.csv")
serving_df = pd.read_csv("/content/test.csv")

train_df.head(10)

serving_df.head(10)

train_df['Sex'].value_counts()

# finding and filling missing values
train_df['Age'].fillna(train_df['Age'].median(), inplace=True)
train_df['Embarked'].fillna(train_df['Embarked'].mode()[0], inplace=True)
train_df['Fare'].fillna(train_df['Fare'].median(), inplace=True)

# Converting categorical columns to numeric columns
train_df['Sex'] = train_df['Sex'].map({'male': 0, 'female': 1})
train_df['Embarked'] = train_df['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})

train_df.drop(['Name', 'Ticket', 'Cabin', 'PassengerId'], axis=1, inplace=True)

"""DATA SPLITTING

"""

X = train_df.drop('Survived', axis=1)
y = train_df['Survived']
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB

#decision tree
model = DecisionTreeClassifier(random_state=42)
model1 = RandomForestClassifier(n_estimators=100, random_state=42)#random forest
model2 = GaussianNB()#naive bias

model.fit(X_train, y_train)
print("next Moel")
model1.fit(X_train, y_train)
print
model2.fit(X_train, y_train)



# Making predictions on the validation set
val_predictions = model.predict(X_val)
print(f"Validation Accuracy: {accuracy_score(y_val, val_predictions)}")
#random forest
val_predictions = model1.predict(X_val)
print(f"Validation Accuracy: {accuracy_score(y_val, val_predictions)}")
#naive bias
val_predictions = model2.predict(X_val)
print(f"Validation Accuracy: {accuracy_score(y_val, val_predictions)}")